# -*- coding: utf-8 -*-
"""SQL Witch Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I6zYjgXlsEgtZJm8HnhozLbsvqJv818D

## SQL Queries with Witchcraft Data
### Jenna Swartz

I am fascinated by witch trials. I am interested in their historical implications for sexism and religious extremism at the times and locations they took place. I learned about the Salem Witch trials in school but had never heard about the Scottish Witch Trials before working on this project.

Using the mySQL witchcraft database through AWS, I explore and analyze this dataset which comes from a project on "Scottish Witchcraft" and contains all people known to have been accused of witchcraft in early modern Scotland. There is information on where and when they were accused, how they were tried, what their fate was etc. I want to get to know the different tables in this dataset, practice different querying strategies, and examine key information about the trials and accusations, like gender distributions, sentencing types, how often the devil is mentioned, and whether torture was involved in any trials to force confessions out of the accused parties.

Julian Goodare, Lauren Martin, Joyce Miller and Louise Yeoman, ‘The Survey of Scottish Witchcraft’,
http://www.shca.ed.ac.uk/Research/witches/
"""

# Commented out IPython magic to ensure Python compatibility.
# %load_ext sql

# Commented out IPython magic to ensure Python compatibility.
# %sql mysql+pymysql://student:guest@columbia-mds-mysql.csbmzoea3lu9.us-east-1.rds.amazonaws.com:3306/witchcraft

# Commented out IPython magic to ensure Python compatibility.
# %config SqlMagic.style = '_DEPRECATED_DEFAULT'

"""To get to know the data, first I will show all available tables."""

# Commented out IPython magic to ensure Python compatibility.
# %sql SHOW TABLES

"""Let's examine what some of the data looks like by selecting the first three entries in the table accused."""

# Commented out IPython magic to ensure Python compatibility.
# %sql SELECT * FROM accused LIMIT 3;

"""I want to see how many people are in the accused table."""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT COUNT(*)
# FROM accused

"""It looks like the age is missing for some observations. I want to count the number of non-missing values for age in the data."""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT COUNT(age)
# FROM accused

"""I want to see what types of occupations the accused had. I am also curious in general what types of occupations existed during this era."""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT DISTINCT occupation
# FROM accused

"""I suspect the vast majority of the accused are female. Below, I confirm that in fact nearly 84% of the accused are female."""

num_female = %sql SELECT COUNT(*) FROM accused WHERE sex = 'Female'
num_total = %sql SELECT COUNT(*) FROM accused
proportion_female = num_female[0][0] / num_total[0][0]
print(f"Propotion of accused that ar female: {proportion_female}")

"""Now I will look at some appearances of the devil in the devilappearance table.

Below I list the unique devil_types in the data. Among them are ghosts, spirits, fairies, and different devil manifestations (child, animal, etc.)
"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT DISTINCT devil_type
# FROM devilappearance

"""I am curious what the descriptions of the type of the devil sightings say. I suspect many of them mention things like "black magic" so I want to see how many of the sightings mention the word "black" in the description. Using Regular Expressions, I counted 120 mentions of the word "black"."""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT COUNT(*)
# FROM devilappearance
# WHERE devil_text REGEXP '\\b[Bb]lack\\b';

"""I am interested in how/if the devil types are gendered. First, I'll look at proportion of devil types that are male (out of all the devil types). Below I find that only 13% of the devil type categories are male devil types."""

num_male_types = %sql SELECT COUNT(DISTINCT devil_type) FROM devilappearance WHERE devil_type REGEXP '\\b[Mm]ale\\b';
num_distinct_devil_types = %sql SELECT COUNT(DISTINCT devil_type) FROM devilappearance;
proportion_devil_types_male = num_male_types[0][0] / num_distinct_devil_types[0][0]
print(f"Propotion of devil types that are male: {proportion_devil_types_male}")

"""Now I'll look at what proportion of all devil appearances have a male mentioned in devil type (out of all the appearances). Surprisingly, even though there weren't as many explicity male devil types, a lot of the appearances do involve male devils (66%)."""

# Query to get the number of male devil appearances
num_male_devil_appearances = %sql SELECT COUNT(*) FROM devilappearance WHERE devil_type REGEXP '\\b[Mm]ale\\b';

# Query to get the total number of appearances
num_appearances = %sql SELECT COUNT(devil_type) FROM devilappearance;

# Extracting the values from the result
num_male_devil_appearances = num_male_devil_appearances[0][0]
num_appearances = num_appearances[0][0]

# Calculate the proportion
proportion_male_devil_appearances = num_male_devil_appearances / num_appearances if num_appearances > 0 else 0

# Print the result
print(f"Proportion of devil appearances that are male: {proportion_male_devil_appearances}")

"""Now I'll examine the trial information.

I will look at the average and maximum numbers of male and female accuser I predict males made more accusations overall.s.

"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SHOW COLUMNS FROM trial;

# Commented out IPython magic to ensure Python compatibility.
# %sql SELECT * FROM trial LIMIT 3;

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT AVG(male_accusers), MAX(male_accusers)
# FROM trial

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT AVG(female_accusers), MAX(female_accusers)
# FROM trial

"""As predicted, males were doing the higher share of accusing, with an average of .42 male accusers per trial and a maximum of 48 male accusers in one single trial.

My previous knowledge suggests that the death penalty would have been a common sentencing type, but I will examine what types of sentencings the trials resulted in here.

I will list them in a table in descending order below, excluding missing values. The table shows that execution was in fact the most common sentencing type but at least some trials resulted in release.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT
#     sentence AS Sentence_Type, #renaming column headings
#     COUNT(*) AS Count
# FROM trial
# WHERE sentence IS NOT NULL AND sentence != '' #excluding missing values
# GROUP BY sentence
# ORDER BY COUNT(*) DESC

"""I want to know if the number of accusers matter for the verdict. For example, I'd imagine trials with more accusers corroborating each other's stories would result in higher guilty verdict rates. Below I compare the average number of accusers by the type of verdict, sorting the table and renaming columns in the output table. The results show that guilty verdict trials do in fact have the higher average number of total accusers, but not guilty verdict cases still had an average of 4.5 total accusers."""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT
#     verdict AS Verdict_Type, #renaming column headings
#     AVG(male_accusers) AS Average_Male_Accusers,
#     AVG(female_accusers) AS Average_Female_Accusers,
#     AVG(male_accusers) + AVG(female_accusers) AS Average_Total_Accusers
# FROM trial
# GROUP BY verdict
# ORDER BY Average_Total_Accusers DESC; #sorted by total average accusers
#

"""I want to see which trials actually involved a confession from the accused, admitting to being involved in witchcraft.

To do so, I will first lLeft join the trial and confession table and then find out for what  share of trialsthee database recoredd confessions?I will then create a  results tabl belowe with the number of all trials, the number of confessions, and the share of trials with confessions recorded.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SHOW COLUMNS FROM confession;

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT *
# FROM trial
# LEFT JOIN confession
# ON trial.trialref = confession.trialref
# LIMIT 1;

num_trials = %sql SELECT COUNT(*) FROM trial;
num_confessions = %sql SELECT COUNT(*) FROM confession;
#Now I'll get number of "matches" to see how many trialref values from confession match trialref value in trial
num_matches = %sql SELECT COUNT(DISTINCT confession.trialref) FROM confession WHERE confession.trialref IN (SELECT DISTINCT trialref FROM trial)
share_confession_trials = num_matches[0][0] / num_trials[0][0]

import pandas as pd

# Now putting everything into a table
results = {
    "Metric": ["Total Trials", "Total Confessions", "Share of Trials with Confessions"],
    "Value": [num_trials[0][0], num_confessions[0][0], share_confession_trials]
}

# Convert the dictionary to a pandas DataFrame
results_df = pd.DataFrame(results)

# Display the table
print(results_df)

"""Less than 25% of the trials actually involved a confession from the accused. I wonder if torture was often used to generate these confessions. I will merge on the confession table below to determine for how many trials torture was mentioned and for what proportion of torture trials was there a confession."""

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT COUNT(*)
# FROM trial
# LEFT JOIN confession
#     ON trial.trialref = confession.trialref
# WHERE (trial.pretrialnotes REGEXP '\\btorture\\b' #instances where torture is mentioned
#     OR trial.trialnotes REGEXP '\\btorture\\b'
#     OR trial.posttrialnotes REGEXP '\\btorture\\b')
#   AND confession.confessionref IS NOT NULL; #AND where there was a non-null confession joined to that trial entry

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# SELECT COUNT(*)
# FROM trial
# LEFT JOIN confession
#     ON trial.trialref = confession.trialref
# WHERE (trial.pretrialnotes REGEXP '\\btorture\\b' #instances where torture is mentioned
#     OR trial.trialnotes REGEXP '\\btorture\\b'
#     OR trial.posttrialnotes REGEXP '\\btorture\\b')

"""There are 47 entries where there was torture AND a confession and 74 entries where there was torture at all. So there was a confession in 63.5% of torture trials even though the confession rate for all trials overall was only 23.5%. So it looks like torture played a crucial role in forcing confessions out of the accused."""

share_torture_confessions = 47 / 74
print(share_torture_confessions)